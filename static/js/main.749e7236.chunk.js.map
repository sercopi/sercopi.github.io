{"version":3,"sources":["styles/index.js","styles/styles.jsx","components/NavBar/index.js","components/NavBar/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","button","background","border","borderRadius","boxShadow","color","height","padding","main","display","flexDirection","justifyContent","backgroundColor","NavBar","React","useState","anchorEl","setAnchorEl","classes","handleClose","className","Button","variant","aria-haspopup","onClick","window","location","href","aria-controls","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","App","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4SACeA,ECEGC,YAAW,CAC3BC,OAAQ,CACNC,WAAW,0BAAD,OAHS,UAGT,iBAJO,UAIP,SACVC,OAAQ,EACRC,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPC,OAAQ,GACRC,QAAS,UAEXC,KAAM,CACJC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,gBAhBiB,aCANC,ECKA,WAAO,IAAD,EACaC,IAAMC,SAAS,MAD5B,mBACZC,EADY,KACFC,EADE,KAEbC,EAAUpB,IAKVqB,EAAc,WAClBF,EAAY,OAEd,OACE,yBAAKG,UAAWF,EAAQV,MACtB,kBAACa,EAAA,EAAD,CACEC,QAAQ,OACRF,UAAWF,EAAQlB,OACnBuB,gBAAc,OACdC,QAAS,kBAAOC,OAAOC,SAASC,KAAO,0BAJzC,gBAQA,kBAACN,EAAA,EAAD,CACEC,QAAQ,OACRM,gBAAc,uBACdR,UAAWF,EAAQlB,OACnBuB,gBAAc,OACdC,QAtBc,SAAAK,GAClBZ,EAAYY,EAAMC,iBAgBhB,aASA,kBAACT,EAAA,EAAD,CACEC,QAAQ,OACRF,UAAWF,EAAQlB,OACnBuB,gBAAc,OACdC,QAAS,kBAAOC,OAAOC,SAASC,KAAO,6BAJzC,gBAQA,kBAACI,EAAA,EAAD,CACEC,GAAG,uBACHhB,SAAUA,EACViB,aAAW,EACXC,KAAMC,QAAQnB,GACdoB,QAASjB,GAET,kBAACkB,EAAA,EAAD,CAAUb,QAASL,GAAnB,WACA,kBAACkB,EAAA,EAAD,CAAUb,QAASL,GAAnB,cACA,kBAACkB,EAAA,EAAD,CAAUb,QAASL,GAAnB,aCxCOmB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcH,QACW,cAA7BV,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.749e7236.chunk.js","sourcesContent":["import useStyles from './styles';\nexport default useStyles;\n","import { makeStyles } from '@material-ui/core/styles';\nconst primaryColor = '#19a8d3';\nconst secondaryColor = '#b76bff';\nconst useStyles = makeStyles({\n  button: {\n    background: `linear-gradient(45deg, ${secondaryColor} 30%, ${primaryColor} 90%)`,\n    border: 0,\n    borderRadius: 0,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px'\n  },\n  main: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    backgroundColor: primaryColor\n  }\n});\nexport default useStyles;\n","import NavBar from './NavBar';\nexport default NavBar;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport useStyles from './../../styles';\n\nconst NavBar = () => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const classes = useStyles();\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  return (\n    <div className={classes.main}>\n      <Button\n        variant=\"text\"\n        className={classes.button}\n        aria-haspopup=\"true\"\n        onClick={() => (window.location.href = 'https://www.google.es')}\n      >\n        go to google\n      </Button>\n      <Button\n        variant=\"text\"\n        aria-controls=\"simple-menu-projects\"\n        className={classes.button}\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        Open Menu\n      </Button>\n      <Button\n        variant=\"text\"\n        className={classes.button}\n        aria-haspopup=\"true\"\n        onClick={() => (window.location.href = 'http://vps675002.ovh.net')}\n      >\n        go to my VPS\n      </Button>\n      <Menu\n        id=\"simple-menu-projects\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleClose}>Profile</MenuItem>\n        <MenuItem onClick={handleClose}>My account</MenuItem>\n        <MenuItem onClick={handleClose}>Logout</MenuItem>\n      </Menu>\n    </div>\n  );\n};\nexport default NavBar;\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\n\nfunction App() {\n  return (\n    <div>\n      <NavBar></NavBar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}